{"version":3,"file":"static/js/744.fd356b4d.chunk.js","mappings":"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","sources":["../node_modules/@mdxeditor/editor/dist/ImageEditor-4eb02292.js"],"sourcesContent":["import React__default, { useRef, useState, useCallback, useEffect, Suspense } from \"react\";\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\nimport { useLexicalNodeSelection } from \"@lexical/react/useLexicalNodeSelection\";\nimport { mergeRegister } from \"@lexical/utils\";\nimport { $isNodeSelection, $getSelection, $getNodeByKey, $setSelection, SELECTION_CHANGE_COMMAND, COMMAND_PRIORITY_LOW, CLICK_COMMAND, DRAGSTART_COMMAND, KEY_DELETE_COMMAND, KEY_BACKSPACE_COMMAND, KEY_ENTER_COMMAND, KEY_ESCAPE_COMMAND } from \"lexical\";\nimport { $ as $isImageNode, s as styles } from \"./index-2fb34a7e.js\";\nimport classNames from \"classnames\";\nimport \"@lexical/react/LexicalComposer\";\nimport \"@lexical/react/LexicalContentEditable\";\nimport \"@lexical/react/LexicalErrorBoundary\";\nimport \"@lexical/react/LexicalHorizontalRulePlugin\";\nimport \"@lexical/react/LexicalLinkPlugin\";\nimport \"@lexical/react/LexicalListPlugin\";\nimport \"@lexical/react/LexicalRichTextPlugin\";\nimport \"@lexical/react/LexicalTabIndentationPlugin\";\nimport \"@lexical/code\";\nimport \"@lexical/link\";\nimport \"@lexical/list\";\nimport \"@lexical/react/LexicalHorizontalRuleNode\";\nimport \"@lexical/rich-text\";\nimport \"mdast-util-directive\";\nimport \"mdast-util-from-markdown\";\nimport \"mdast-util-frontmatter\";\nimport \"mdast-util-gfm-table\";\nimport \"mdast-util-mdx\";\nimport \"micromark-extension-directive\";\nimport \"micromark-extension-frontmatter\";\nimport \"micromark-extension-gfm-table\";\nimport \"micromark-extension-mdxjs\";\nimport \"@lexical/selection\";\nimport \"@lexical/react/LexicalHistoryPlugin\";\nimport \"mdast-util-to-markdown\";\nimport \"@radix-ui/react-popover\";\nimport \"@radix-ui/react-tooltip\";\nimport \"downshift\";\nimport \"@lexical/markdown\";\nimport \"@lexical/react/LexicalMarkdownShortcutPlugin\";\nimport \"react-diff-view\";\nimport \"unidiff\";\nimport \"@radix-ui/react-toolbar\";\nimport \"@radix-ui/react-select\";\nimport \"@radix-ui/react-dialog\";\nconst imageCache = /* @__PURE__ */ new Set();\nfunction useSuspenseImage(src) {\n  if (!imageCache.has(src)) {\n    throw new Promise((resolve) => {\n      const img = new Image();\n      img.src = src;\n      img.onload = () => {\n        imageCache.add(src);\n        resolve(null);\n      };\n    });\n  }\n}\nfunction LazyImage({\n  title,\n  className,\n  imageRef,\n  src\n}) {\n  useSuspenseImage(src);\n  return /* @__PURE__ */ React__default.createElement(\"img\", { className: className || void 0, src, title, ref: imageRef, draggable: \"false\" });\n}\nfunction ImageEditor({ src, title, nodeKey }) {\n  const imageRef = useRef(null);\n  const buttonRef = useRef(null);\n  const [isSelected, setSelected, clearSelection] = useLexicalNodeSelection(nodeKey);\n  const [editor] = useLexicalComposerContext();\n  const [selection, setSelection] = useState(null);\n  const activeEditorRef = useRef(null);\n  const onDelete = useCallback(\n    (payload) => {\n      if (isSelected && $isNodeSelection($getSelection())) {\n        const event = payload;\n        event.preventDefault();\n        const node = $getNodeByKey(nodeKey);\n        if ($isImageNode(node)) {\n          node.remove();\n        }\n      }\n      return false;\n    },\n    [isSelected, nodeKey]\n  );\n  const onEnter = useCallback(\n    (event) => {\n      const latestSelection = $getSelection();\n      const buttonElem = buttonRef.current;\n      if (isSelected && $isNodeSelection(latestSelection) && latestSelection.getNodes().length === 1) {\n        if (buttonElem !== null && buttonElem !== document.activeElement) {\n          event.preventDefault();\n          buttonElem.focus();\n          return true;\n        }\n      }\n      return false;\n    },\n    [isSelected]\n  );\n  const onEscape = useCallback(\n    (event) => {\n      if (buttonRef.current === event.target) {\n        $setSelection(null);\n        editor.update(() => {\n          setSelected(true);\n          const parentRootElement = editor.getRootElement();\n          if (parentRootElement !== null) {\n            parentRootElement.focus();\n          }\n        });\n        return true;\n      }\n      return false;\n    },\n    [editor, setSelected]\n  );\n  useEffect(() => {\n    let isMounted = true;\n    const unregister = mergeRegister(\n      editor.registerUpdateListener(({ editorState }) => {\n        if (isMounted) {\n          setSelection(editorState.read(() => $getSelection()));\n        }\n      }),\n      editor.registerCommand(\n        SELECTION_CHANGE_COMMAND,\n        (_, activeEditor) => {\n          activeEditorRef.current = activeEditor;\n          return false;\n        },\n        COMMAND_PRIORITY_LOW\n      ),\n      editor.registerCommand(\n        CLICK_COMMAND,\n        (payload) => {\n          const event = payload;\n          if (event.target === imageRef.current) {\n            if (event.shiftKey) {\n              setSelected(!isSelected);\n            } else {\n              clearSelection();\n              setSelected(true);\n            }\n            return true;\n          }\n          return false;\n        },\n        COMMAND_PRIORITY_LOW\n      ),\n      editor.registerCommand(\n        DRAGSTART_COMMAND,\n        (event) => {\n          if (event.target === imageRef.current) {\n            event.preventDefault();\n            return true;\n          }\n          return false;\n        },\n        COMMAND_PRIORITY_LOW\n      ),\n      editor.registerCommand(KEY_DELETE_COMMAND, onDelete, COMMAND_PRIORITY_LOW),\n      editor.registerCommand(KEY_BACKSPACE_COMMAND, onDelete, COMMAND_PRIORITY_LOW),\n      editor.registerCommand(KEY_ENTER_COMMAND, onEnter, COMMAND_PRIORITY_LOW),\n      editor.registerCommand(KEY_ESCAPE_COMMAND, onEscape, COMMAND_PRIORITY_LOW)\n    );\n    return () => {\n      isMounted = false;\n      unregister();\n    };\n  }, [clearSelection, editor, isSelected, nodeKey, onDelete, onEnter, onEscape, setSelected]);\n  const draggable = $isNodeSelection(selection);\n  const isFocused = isSelected;\n  return /* @__PURE__ */ React__default.createElement(Suspense, { fallback: null }, /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, /* @__PURE__ */ React__default.createElement(\"div\", { draggable, className: styles.imageWrapper, \"data-editor-block-type\": \"image\" }, /* @__PURE__ */ React__default.createElement(\n    LazyImage,\n    {\n      className: classNames({\n        [styles.focusedImage]: isFocused\n      }),\n      src,\n      title: title || \"\",\n      imageRef\n    }\n  ))));\n}\nexport {\n  ImageEditor\n};\n"],"names":["imageCache","Set","LazyImage","_ref","title","className","imageRef","src","has","Promise","resolve","img","Image","onload","add","useSuspenseImage","React__default","ref","draggable","ImageEditor","_ref2","nodeKey","useRef","buttonRef","_useLexicalNodeSelect","useLexicalNodeSelection","_useLexicalNodeSelect2","_slicedToArray","isSelected","setSelected","clearSelection","_useLexicalComposerCo","useLexicalComposerContext","editor","_useState","useState","_useState2","selection","setSelection","activeEditorRef","onDelete","useCallback","payload","$isNodeSelection","$getSelection","preventDefault","node","$getNodeByKey","$isImageNode","remove","onEnter","event","latestSelection","buttonElem","current","getNodes","length","document","activeElement","focus","onEscape","target","$setSelection","update","parentRootElement","getRootElement","useEffect","isMounted","unregister","mergeRegister","registerUpdateListener","_ref3","editorState","read","registerCommand","SELECTION_CHANGE_COMMAND","_","activeEditor","COMMAND_PRIORITY_LOW","CLICK_COMMAND","shiftKey","DRAGSTART_COMMAND","KEY_DELETE_COMMAND","KEY_BACKSPACE_COMMAND","KEY_ENTER_COMMAND","KEY_ESCAPE_COMMAND","isFocused","Suspense","fallback","styles","imageWrapper","classNames","_defineProperty","focusedImage"],"sourceRoot":""}